(lambda ast: (lambda sys: (lambda func_expr_map: (lambda FuncVisitor: (lambda CallTransformer: (lambda code: (lambda root: (lambda _: (lambda _: (lambda expr: (lambda _: None)(open('out.py', 'w').write(ast.unparse(expr))))((lambda root, default_value: (lambda __f: (lambda __x: __x(__x))(lambda __x: __f(lambda __arg0, __arg1: __x(__x)(__arg0, __arg1))))(lambda gen_expr: lambda root, default_value: (lambda Context: (lambda exprs: (lambda nodes: (lambda ctx: (lambda _: (lambda _: (lambda exprs, nodes, default_value: (lambda __f: (lambda __x: __x(__x))(lambda __x: __f(lambda __arg0, __arg1, __arg2: __x(__x)(__arg0, __arg1, __arg2))))(lambda get_func_expr: lambda exprs, nodes, default_value: (lambda Context: (lambda ctx: (lambda _: (lambda _: (lambda _: ctx.expr)([(lambda _: None)(setattr(ctx, 'expr', expr_func(ctx.expr, node))) for (expr_func, node) in zip(exprs[-2::-1], nodes[::-1])]))(setattr(ctx, 'expr', exprs[-1])))(exprs.append(default_value)) if len(exprs) == 0 or (exprs[-1] is not None and (not isinstance(exprs[-1], ast.Expr))) else (lambda _: (lambda _: ctx.expr)([(lambda _: None)(setattr(ctx, 'expr', expr_func(ctx.expr, node))) for (expr_func, node) in zip(exprs[-2::-1], nodes[::-1])]))(setattr(ctx, 'expr', exprs[-1])))(Context()))(type('Context', (object,), {'__init__': lambda self: (lambda _: None)(setattr(self, 'expr', None))})))(exprs, nodes, default_value))(exprs, nodes, ctx.default_value))([(lambda _: (lambda _: None)((lambda exprs, node, gen_args: (lambda __f: (lambda __x: __x(__x))(lambda __x: __f(lambda __arg0, __arg1, __arg2: __x(__x)(__arg0, __arg1, __arg2))))(lambda gen_import_expr: lambda exprs, node, gen_args: (lambda outs: (lambda _: (lambda _: None)(exprs.append(lambda expr, node: ast.Call(func=ast.Lambda(args=ast.arguments(args=outs, posonlyargs=[], kwonlyargs=[], defaults=[]), body=expr), args=[(lambda s: (lambda __f: (lambda __x: __x(__x))(lambda __x: __f(lambda __arg0: __x(__x)(__arg0))))(lambda parse_str: lambda s: ast.parse(s).body[0].value)(s))(gen_args(node, submodule)) for submodule in node.names], keywords=[]))))([(lambda out_name: (lambda out_name: (lambda _: None)(outs.append(ast.arg(arg=out_name))))(submodule.name) if out_name == None else (lambda _: None)(outs.append(ast.arg(arg=out_name))))(submodule.asname) for submodule in node.names]))([]))(exprs, node, gen_args))(exprs, node, lambda node, submodule: f'__import__("{node.module}", [], [], ["{submodule.name}"]).{submodule.name}')) if isinstance(node, ast.ImportFrom) else (lambda _: None)((lambda exprs, node, gen_args: (lambda __f: (lambda __x: __x(__x))(lambda __x: __f(lambda __arg0, __arg1, __arg2: __x(__x)(__arg0, __arg1, __arg2))))(lambda gen_import_expr: lambda exprs, node, gen_args: (lambda outs: (lambda _: (lambda _: None)(exprs.append(lambda expr, node: ast.Call(func=ast.Lambda(args=ast.arguments(args=outs, posonlyargs=[], kwonlyargs=[], defaults=[]), body=expr), args=[(lambda s: (lambda __f: (lambda __x: __x(__x))(lambda __x: __f(lambda __arg0: __x(__x)(__arg0))))(lambda parse_str: lambda s: ast.parse(s).body[0].value)(s))(gen_args(node, submodule)) for submodule in node.names], keywords=[]))))([(lambda out_name: (lambda out_name: (lambda _: None)(outs.append(ast.arg(arg=out_name))))(submodule.name) if out_name == None else (lambda _: None)(outs.append(ast.arg(arg=out_name))))(submodule.asname) for submodule in node.names]))([]))(exprs, node, gen_args))(exprs, node, lambda node, submodule: f'__import__("{submodule.name}")')) if isinstance(node, ast.Import) else (lambda _: None)((lambda exprs, node: (lambda __f: (lambda __x: __x(__x))(lambda __x: __f(lambda __arg0, __arg1: __x(__x)(__arg0, __arg1))))(lambda gen_assign_expr: lambda exprs, node: (lambda target: (lambda outs: (lambda _: (lambda _: None)(exprs.append(lambda expr, node: ast.Call(func=ast.Lambda(args=ast.arguments(args=outs, posonlyargs=[], kwonlyargs=[], defaults=[]), body=expr), args=[ast.Starred(value=node.value)], keywords=[]))))([(lambda _: None)(outs.append(ast.arg(arg=name.id))) for name in target.elts]))([]) if isinstance(target, ast.Tuple) else (lambda _: None)(exprs.append(lambda expr, node: ast.Call(func=ast.Lambda(args=ast.arguments(args=[ast.arg(target.id)], posonlyargs=[], kwonlyargs=[], defaults=[]), body=expr), args=[node.value], keywords=[]))) if isinstance(target, ast.Name) else (lambda _: None)(exprs.append(lambda expr, node: ast.Call(func=ast.Lambda(args=ast.arguments(args=[ast.arg(arg='_')], posonlyargs=[], kwonlyargs=[], defaults=[]), body=expr), args=[ast.Call(func=ast.Name(id='setattr'), args=[target.value, ast.Constant(target.attr), node.value], keywords=[])], keywords=[]))) if isinstance(target, ast.Attribute) else (lambda _: None)(exprs.append(lambda expr, node: ast.Call(func=ast.Lambda(args=ast.arguments(args=[ast.arg(arg='_')], posonlyargs=[], kwonlyargs=[], defaults=[]), body=expr), args=[ast.Call(func=ast.Attribute(value=target.value, attr='__setitem__'), args=[target.slice, node.value], keywords=[])], keywords=[]))) if isinstance(target, ast.Subscript) else (lambda _: (lambda _: None)(print(target)))(print('assign:unsupport type')))(node.targets[0]) if len(node.targets) == 1 else (lambda _: None)(print('unknown')))(exprs, node))(exprs, node)) if isinstance(node, ast.Assign) else (lambda _: (lambda func_expr: (lambda args_str: (lambda Y_combiner: (lambda func: (lambda _: None)(setattr(func, 'body', ast.Call(args=node.args.args, func=ast.Call(func=Y_combiner, args=[ast.Lambda(args=ast.arguments(args=[ast.arg(node.name)], posonlyargs=[], kwonlyargs=[], defaults=[]), body=ast.Lambda(args=node.args, body=func_expr))], keywords=[]), keywords=[]))))(func_expr_map[node.name]))((lambda s: (lambda __f: (lambda __x: __x(__x))(lambda __x: __f(lambda __arg0: __x(__x)(__arg0))))(lambda parse_str: lambda s: ast.parse(s).body[0].value)(s))(f'lambda __f: (lambda __x: __x(__x))(lambda __x: __f(lambda {args_str}: __x(__x)({args_str})))')))((lambda num: (lambda __f: (lambda __x: __x(__x))(lambda __x: __f(lambda __arg0: __x(__x)(__arg0))))(lambda gen_arg_str: lambda num: ','.join([f'__arg{i} ' for i in range(num)]))(num))(len(node.args.args))))(gen_expr(node, ast.Constant(value=None))))(nodes.pop()) if isinstance(node, ast.FunctionDef) else (lambda _: None)((lambda exprs, node, gen_expr_func: (lambda __f: (lambda __x: __x(__x))(lambda __x: __f(lambda __arg0, __arg1, __arg2: __x(__x)(__arg0, __arg1, __arg2))))(lambda gen_class_expr: lambda exprs, node, gen_expr_func: (lambda init_codes: (lambda func_map: (lambda _: (lambda func_list: (lambda _: (lambda base_list: (lambda _: None)(exprs.append(lambda expr, node: ast.Call(func=ast.Lambda(args=ast.arguments(args=[ast.arg(node.name)], posonlyargs=[], kwonlyargs=[], defaults=[]), body=expr), args=[(lambda s: (lambda __f: (lambda __x: __x(__x))(lambda __x: __f(lambda __arg0: __x(__x)(__arg0))))(lambda parse_str: lambda s: ast.parse(s).body[0].value)(s))(f"{node.name} = type('{node.name}', ({','.join(base_list)},),{{{','.join(func_list)}}})")], keywords=[]))))(['object']) if len(node.bases) == 0 else (lambda base_list: (lambda _: None)(exprs.append(lambda expr, node: ast.Call(func=ast.Lambda(args=ast.arguments(args=[ast.arg(node.name)], posonlyargs=[], kwonlyargs=[], defaults=[]), body=expr), args=[(lambda s: (lambda __f: (lambda __x: __x(__x))(lambda __x: __f(lambda __arg0: __x(__x)(__arg0))))(lambda parse_str: lambda s: ast.parse(s).body[0].value)(s))(f"{node.name} = type('{node.name}', ({','.join(base_list)},),{{{','.join(func_list)}}})")], keywords=[]))))([ast.unparse(base) for base in node.bases]))([(lambda _: None)(func_list.append(f'"{func_name}":{ast.unparse(func_map[func_name])}')) for func_name in func_map]))([]))([(lambda func_expr: (lambda _: None)(func_map.__setitem__(stat.name, ast.Lambda(body=func_expr, args=stat.args))))(gen_expr_func(stat, ast.Constant(value=None))) if isinstance(stat, ast.FunctionDef) else (lambda _: None)(init_codes.append(stat)) for stat in node.body]))({}))([]))(exprs, node, gen_expr_func))(exprs, node, gen_expr)) if isinstance(node, ast.ClassDef) else (lambda _: (lambda _: None)(setattr(ctx, 'default_value', node.value)))(nodes.pop()) if isinstance(node, ast.Return) else (lambda _: None)((lambda exprs, node, gen_expr_func: (lambda __f: (lambda __x: __x(__x))(lambda __x: __f(lambda __arg0, __arg1, __arg2: __x(__x)(__arg0, __arg1, __arg2))))(lambda gen_for_expr: lambda exprs, node, gen_expr_func: (lambda for_expr: (lambda arg: (lambda _: None)(exprs.append(lambda expr, node: ast.Call(func=ast.Lambda(args=ast.arguments(args=[ast.arg('_')], posonlyargs=[], kwonlyargs=[], defaults=[]), body=expr), args=[ast.ListComp(generators=[ast.comprehension(target=node.target, iter=node.iter, ifs=[], is_async=0)], elt=for_expr)], keywords=[]))))(ast.ListComp(generators=[ast.comprehension(target=node.target, iter=node.iter, ifs=[], is_async=0)], elt=for_expr)))(gen_expr_func(node, ast.Constant(value=None))))(exprs, node, gen_expr_func))(exprs, node, gen_expr)) if isinstance(node, ast.For) else (lambda _: None)(exprs.append(lambda expr, node: ast.IfExp(test=node.test, body=gen_expr(node, expr), orelse=gen_expr(ast.Lambda(body=node.orelse), expr)))) if isinstance(node, ast.If) else (lambda _: None)(exprs.append(lambda expr, node: ast.Call(func=ast.Lambda(args=ast.arguments(args=[ast.arg('_')], posonlyargs=[], kwonlyargs=[], defaults=[]), body=expr), args=[node.value], keywords=[]))) if isinstance(node, ast.Expr) else (lambda _: None)(nodes.pop()) if isinstance(node, ast.Pass) else (lambda _: (lambda _: None)(print(node)))(print('unsupported type:')))(nodes.append(node)) for node in root.body]))(setattr(ctx, 'default_value', default_value)))(Context()))([]))([]))(type('Context', (object,), {'__init__': lambda self: (lambda _: None)(setattr(self, 'default_value', None))})))(root, default_value))(root, ast.Constant(value=None))))(CallTransformer().visit(root)))(FuncVisitor().visit(root)))(ast.parse(code)))(open(sys.argv[1], 'r').read()))(type('CallTransformer', (ast.NodeTransformer,), {'__init__': lambda self: (lambda _: None)(setattr(self, 'stack', [])), 'visit_FunctionDef': lambda self, node: (lambda _: (lambda node: (lambda _: node)(self.stack.pop()))(ast.NodeTransformer.generic_visit(self, node)))(self.stack.append(node.name)), 'visit_Call': lambda self, node: (lambda func: ((lambda _: ast.NodeTransformer.generic_visit(self, node))(setattr(node, 'func', func_expr_map[func.id])) if len(self.stack) == 0 or self.stack[-1] != func.id else ast.NodeTransformer.generic_visit(self, node)) if isinstance(func, ast.Name) and func.id in func_expr_map.keys() else ast.NodeTransformer.generic_visit(self, node))(node.func)})))(type('FuncVisitor', (ast.NodeVisitor,), {'visit_FunctionDef': lambda self, node: (lambda _: None)(func_expr_map.__setitem__(node.name, ast.Lambda(args=node.args, body=ast.Constant(value=None))))})))({}))(__import__('sys')))(__import__('ast'))